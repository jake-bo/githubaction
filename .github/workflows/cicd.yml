# GitHub Actions Workflow for Terragrunt CI/CD - Terragrunt CI/CD 工作流
# This workflow handles infrastructure deployment using Terragrunt for multiple environments
# 该工作流使用 Terragrunt 处理多环境的基础设施部署

name: CICD-terragrunt-demo

# Global environment variables - 全局环境变量
# env:
#   TERRAGRUNT_VERSION: "0.91.4"
#   TERRAFORM_VERSION: "1.11.4"
#   TERRAGRUNT_DIR: "terragrunt/infra-rd-terragrunt/resource-directories"  

# Trigger condition: Manual trigger - 触发条件：手动触发
on:
  workflow_dispatch:
    inputs:
      Deployment:
        description: 'apply or update or destroy - 部署、更新或删除资源'
        required: true
        type: choice
        options:
          - apply    # Deploy resources - 部署资源
          - update   # Update resources - 更新资源
          - destroy  # Destroy resources - 删除资源
      infrastructure_json_params:
        description: 'require json'
        required: true
        type: string
      # task_token:
      #   description: 'Callback to cloud flow task_token'
      #   required: true
      #   type: string
      # stage:
      #   description: 'The account of stage'
      #   required: true
      #   type: string
      # realm_name:
      #   description: 'use for set secret'
      #   required: true
      #   type: string
        
jobs: 
  prod-init-plan-apply:
    name: ${{ github.ref_name }} Branch Tasks
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    env:
      RD: prod
      OTS_RD: p
    steps:
      # - name: Dynamic processing of inputs
      #   id: set_secret_name
      #   run: |
      #     echo "secret_ak=PROD_${{ inputs.realm_name }}_CICD_ACCOUNT_AK" >> $GITHUB_OUTPUT
      #     echo "secret_sk=PROD_${{ inputs.realm_name }}_CICD_ACCOUNT_SK" >> $GITHUB_OUTPUT
      #     lowercase_realm=$(echo "${{ inputs.realm_name }}" | tr '[:upper:]' '[:lower:]') 
      #     echo "lowercase_realm=${lowercase_realm}" >> $GITHUB_OUTPUT  
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Pipeline Usage
        run: |
          echo "This workflow execution for ${{ github.event.inputs.action }} infrastructure in ${{ github.ref_name }}"
      - name: Parse Json Input To Tfvars
        uses: ./.github/actions/test
        with:
          json_param: ${{ inputs.infrastructure_json_params }}
          tfvars_file_path: ${{github.workspace}}/deployment/terragrunt.hcl
      # - name: Inject ak/sk to config.json and backend.tf
      #   uses: ./.github/actions/inject-credentials
      #   env: 
      #     SECRET_AK_VALUE: ${{ secrets[steps.set_secret_name.outputs.secret_ak] }}
      #     SECRET_SK_VALUE: ${{ secrets[steps.set_secret_name.outputs.secret_sk] }}
      #   with:
      #     config_json_path: ${{github.workspace}}/deployment/config.json
      #     target_directory: deployment
      #     access_key: ${{ secrets.PROD_DEPLOYMENT_ACCOUNT_AK }}
      #     secret_key: ${{ secrets.PROD_DEPLOYMENT_ACCOUNT_SK }}
      #     target_uid: ${{ inputs.target_uid }}
      #     ma_account_uid: ${{ secrets.PROD_MA_ACCOUNT_UID }}
      #     env: ${{ github.ref_name }}
      #     cicd_ak: ${{ env.SECRET_AK_VALUE }}  
      #     cicd_sk: ${{ env.SECRET_SK_VALUE }}
      #     stage: ${{ inputs.stage }}
      #     ots_rd: ${{ env.OTS_RD }}
      #     realm_name: ${{ steps.set_secret_name.outputs.lowercase_realm}}
      #     rd: ${{ env.RD}}
      # - name: Copy config json to default directory in user home # TODO:This step is temp solution for terraform twice assumerole, it is a product issue.After the issue being solved，the step will be deleted
      #   run: |
      #     cp ${{github.workspace}}/deployment/config.json ~/.aliyun/config.json
      # - name: Terraform init
      #   run: |
      #     cd deployment 
      #     cat backend.tf
      #     terraform init
      # - name: Terraform plan
      #   run: |
      #     cd deployment
      #     if [ "${{ github.event.inputs.action }}" == "apply" ]; then
      #     terraform plan -var-file=terraform.tfvars  
      #     elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
      #     terraform plan -destroy  
      #     fi          
      # - name: Terraform apply or destroy
      #   id: tf_apply
      #   run: |
      #     cd deployment
      #     if [ "${{ github.event.inputs.action }}" == "apply" ]; then
      #     terraform apply -auto-approve -no-color -input=false  
      #     elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
      #     terraform destroy -auto-approve -no-color -input=false 
      #     fi 

      # - name: Sent workflow status to remote api
      #   if: always()
      #   run: | 
      #     if [ "${{ job.status }}" == "success" ]; then
      #     aliyun fnf ReportTaskSucceeded  --region cn-shanghai --Output '{}' --TaskToken ${{ inputs.task_token}} 
      #     else
      #     aliyun fnf ReportTaskFailed --region cn-shanghai --TaskToken ${{ inputs.task_token}} --Error PipelineError
      #     fi


  
